 - *Refactoring for rise analysis*
 - [X] Factor out shared code from get_series_time_offsets and call it
   get_series_offsets; it will contain code that is relevant to both recession
   (calculating "time" offsets, as stated) and rise (calculating dynamic
   storage offsets)
 - [X] Add a new function for the rise curve, get_series_storage_offsets, that
   just calls get_series_offsets.
 - [X] In rise.py, call get_series_storage_offsets
 - [X] Refactor compute_rise_offsets
 - [ ] Add a function in rise.py to compute the covariance matrix for
   rise analysis
 - [ ] Add a subcommand that computes and dumps the covariance matrix
   for rise analysis
   - spowtd rise --dump-covariance FILE
   - spowtd plot rise-covariance
 - [ ] Add a flag in rise.py::find_rise_offsets ->
   rise.py::compute_rise_offsets -> fit_offsets.py::get_series_storage_offsets
   to use the covariance matrix
   - Put in stub code to raise NotImplementedError if this flag is passed
 - */Refactoring for rise analysis*
 - [ ] Add test of subcommand that computes and dumps covariance
   matrix for rise analysis
 - [ ] Create a function that assembles the covariance matrix for
   rise analysis, assuming multiplicative errors
   - It has size (# equations, # equations)
   - Start by assembling it in the most naive way, to try to get an
     accurate regression test from the beginning. Then, refactor.
   - We will need some statistics on each series:
     - f_ij
     - |J_i|
     - R_j
     - Terms all look like R_j1^2 f_i1j1 f_i2j1.  Precompute these?
   - It is symmetric, so it makes sense to populate upper and lower
     triangles at the same time

 - [ ] Add optional weighting of linear system so each event is
   weighted equally
   - Consider adding an additional argument 'weighting_scheme' to
     fit_offsets, default None.
   - Consider allowing an l1-norm solution to the generalized
     least-squares problem?
   - We could do numerical experiments with this, giving the recharge
     depth error \alpha some heavy-tailed distribution.
 - [ ] Enable use of l1 norm instead of l2 norm when fitting rise
   curves
   - Use Cholesky decomposition of covariance matrix to decorrelate.
   - Then use cvxopt:
     https://cvxopt.org/examples/mlbook/l1.html
   - This module is not actually in the CVXOPT distribution; it is included as
     an example module (which, at least on Fedora, is not really set up like a
     module; there is a test problem that will be executed on import).
 - [ ] Add deltaMu (vertical shift) as a peatclsm parameter
 - [ ] Resolve discrepancy in units between spline and Peatclsm
   transmissivity
 - [ ] Update man page
 - [ ] Simpler unit tests to verify functions
 - [ ] Trim test time series to short intervals
 - [ ] Don't create an SQLite db if it doesn't exist for commands for
   which this is inappropriate
 - [ ] Don't create SQLite db if load fails (create in memory, then
   dump)
 - [ ] Use fixtures to speed up tests that require assembly of rise
   and recession curves
